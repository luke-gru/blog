# https://www.digitalocean.com/community/tutorials/containerizing-a-ruby-on-rails-application-for-development-with-docker-compose
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    depends_on:
      #- database
      - redis
    ports: 
      - "3000:3000"
    # allow using debugger on the web app server
    stdin_open: true
    tty: true
    volumes:
      - .:/rails # bind-mount the current directory to the /rails directory (https://docs.docker.com/engine/storage/bind-mounts/)
      # when updating gems, remember to delete this volume before recreating this service
      - gem_cache:/usr/local/bundle/gems
      #- node_modules:/rails/node_modules
    env_file: .env
    environment:
      RAILS_ENV: development

  redis:
    image: redis:7.4.1

  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile.dev
    depends_on:
      - app
      - redis
    volumes:
      - .:/rails
      - gem_cache:/usr/local/bundle/gems
    env_file: .env
    environment:
      RAILS_ENV: development
    entrypoint: ./docker/sidekiq_entrypoint_dev.sh

# persist these volumes across service stop/start
volumes:
  # so we don't need to bundle install and download everything each time
  gem_cache:
